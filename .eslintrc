{
  "env": {
    "browser": true,
    "es2021": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:react-hooks/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "@typescript-eslint",
    "import",
    "react-hooks"
  ],
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx"
      ]
    },
    "import/resolver": {
      "typescript": {
        "project": [
          "tsconfig.json"
        ]
      }
    }
  },
  "ignorePatterns": [
    "server/**",
    "node_modules"
  ],
  "rules": {
    "react/prop-types": "off",
    "array-callback-return": "error",
    "no-await-in-loop": "error",
    "@typescript-eslint/no-inferrable-types": [
      "error",
      {
        "ignoreParameters": true,
        "ignoreProperties": true
      }
    ],
    "@typescript-eslint/no-unused-vars": "error",
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 1
      }
    ],
    "space-before-function-paren": [
      "error",
      {
        "asyncArrow": "always",
        "anonymous": "always",
        "named": "never"
      }
    ],
    "no-constant-binary-expression": "error",
    "no-duplicate-imports": "error",
    "no-self-compare": "error",
    "no-unmodified-loop-condition": "error",
    "no-unreachable-loop": "error",
    "@typescript-eslint/no-use-before-define": "error",
    "arrow-body-style": [
      "error",
      "as-needed"
    ],
    "arrow-parens": [
      "error",
      "as-needed"
    ],
    "@typescript-eslint/comma-dangle": [
      "error",
      "always-multiline"
    ],
    "block-scoped-var": "error",
    "camelcase": "error",
    "class-methods-use-this": "warn",
    "react/react-in-jsx-scope": "off",
    "react/display-name": "off",
    "consistent-return": [
      "error",
      {
        "treatUndefinedAsUnspecified": true
      }
    ],
    "curly": "error",
    "eqeqeq": [
      "error",
      "always",
      {
        "null": "ignore"
      }
    ],
    "no-empty": [
      "error",
      {
        "allowEmptyCatch": true
      }
    ],
    "no-multi-spaces": "error",
    "no-trailing-spaces": "error",
    "no-console": "warn",
    "no-else-return": "error",
    "no-lonely-if": "error",
    "no-nested-ternary": "error",
    "@typescript-eslint/no-shadow": "error",
    "no-var": "error",
    "prefer-const": "error",
    "require-await": "error",
    "array-bracket-spacing": "error",
    "import/no-cycle": [
      2,
      {
        "maxDepth": 1
      }
    ],
    "max-len": [
      "error",
      {
        "code": 120,
        "ignoreComments": true
      }
    ],
    "@typescript-eslint/indent": [
      "error",
      2
    ],
    "@typescript-eslint/quotes": [
      "error",
      "single"
    ],
    "@typescript-eslint/semi": [
      "error",
      "always"
    ],
    "jsx-quotes": [
      "error",
      "prefer-single"
    ],
    "object-shorthand": [
      "error",
      "always",
      {
        "avoidExplicitReturnArrows": true
      }
    ],
    "@typescript-eslint/keyword-spacing": "error",
    "@typescript-eslint/comma-spacing": "error",
    "space-in-parens": "error",
    "semi-spacing": "error",
    "@typescript-eslint/object-curly-spacing": [
      "error",
      "always"
    ],
    "key-spacing": "error",
    "react/jsx-key": "error",
    "react/jsx-tag-spacing": "error",
    "react/jsx-wrap-multilines": [
      "error",
      {
        "declaration": "parens-new-line",
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": "parens-new-line",
        "logical": "parens-new-line",
        "prop": "parens-new-line"
      }
    ],
    "react/jsx-indent": [
      "error",
      2
    ],
    "generator-star-spacing": [
      "error",
      {
        "before": true,
        "after": false
      }
    ]
  }
}
